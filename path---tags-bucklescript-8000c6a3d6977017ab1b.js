webpackJsonp([0xe4a837d3e976],{447:function(t,e){t.exports={data:{allMarkdownRemark:{totalCount:13,edges:[{node:{fields:{slug:"/decoders-and-encoders"},excerpt:"Schema evolution Evolution is a natural part of a systems lifecycle; requirements change, reality sets in and bugs are fixed. \nAs a result…",timeToRead:4,frontmatter:{title:"Decoders and Encoders",tags:["getting-started","nact","reason","bucklescript"],date:"28/01/2018"}}},{node:{fields:{slug:"/decoders-and-encoders"},excerpt:"Schema evolution Evolution is a natural part of a systems lifecycle; requirements change, reality sets in and bugs are fixed. \nAs a result…",timeToRead:3,frontmatter:{title:"Decoders and Encoders",tags:["getting-started","nact","reason","bucklescript"],date:"28/01/2018"}}},{node:{fields:{slug:"/시작하기"},excerpt:"Nact는 Node 8 이상 버전 설치된 환경에서 작동합니다. 아래의 방법으로 설치할 수 있습니다. 액터 시스템을 시작하고 참조를 반환한다:  start() 설치한 후에, 애플리케이션 코드에서  start  함수를 import 합니다.  start…",timeToRead:2,frontmatter:{title:"시작하기",tags:["getting-started","nact","reason","bucklescript"],date:"22/03/2019"}}},{node:{fields:{slug:"/actor-communication"},excerpt:"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the  dispatch…",timeToRead:1,frontmatter:{title:"Actor Communication",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/hierarchy"},excerpt:"The application we made in the  querying  section isn't very useful. For one it only supports a single user's contacts, and secondly it…",timeToRead:2,frontmatter:{title:"Hierarchy",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/introduction"},excerpt:"Nact is an implementation of the actor model for Node.js. It is inspired by the approaches taken by  Akka  and  Erlang . Additionally it…",timeToRead:1,frontmatter:{title:"Introduction",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/querying"},excerpt:"Actor systems don't live in a vacuum, they need to be available to the outside world. Commonly actor systems are fronted by REST APIs or RPC…",timeToRead:3,frontmatter:{title:"Querying",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/persist"},excerpt:"Note: Please take a careful look at the  Decoders and Encoders  section to understand an important limitation of persistence actors in…",timeToRead:2,frontmatter:{title:"Persist",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/persistent-queries"},excerpt:"You start to see the biggest benefit from snapshotting best when your state is small in size, and persisted events are many. \nHowever…",timeToRead:3,frontmatter:{title:"Persistent Queries",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/timeouts"},excerpt:"While not strictly a part of the persistent actor, timeouts are frequently used with snapshotting. Actors take up memory, which is still a…",timeToRead:1,frontmatter:{title:"Timeouts",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/snapshotting"},excerpt:"Sometimes actors accumulate a lot of persisted events. This is problematic because it means that it can take a potentially long time for an…",timeToRead:1,frontmatter:{title:"Snapshotting",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/getting-started"},excerpt:"Tip: The remix buttons like the one above, allow you to try out the samples in this guide and make changes to them. \nPlaying around with the…",timeToRead:2,frontmatter:{title:"Getting Started",tags:["getting-started","nact","reason","bucklescript"],date:"11/12/2017"}}},{node:{fields:{slug:"/인코더-디코더"},excerpt:"…",timeToRead:2,frontmatter:{title:"인코더/디코더",tags:["getting-started","nact","reason","bucklescript"],date:"10/04/2019"}}}]}},pathContext:{tag:"bucklescript"}}}});
//# sourceMappingURL=path---tags-bucklescript-8000c6a3d6977017ab1b.js.map