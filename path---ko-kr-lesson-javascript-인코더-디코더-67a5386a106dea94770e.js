webpackJsonp([0x7a7c3fcf5a16],{441:function(n,s){n.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"액터 간 통신",lesson:2,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/액터-간-통신"}}},{node:{frontmatter:{title:"시작하기",lesson:2,programming_language:"javascript",chapter:1,type:"lesson"},fields:{slug:"/시작하기"}}},{node:{frontmatter:{title:"액터의 계층 구조",lesson:4,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/액터의-계층-구조"}}},{node:{frontmatter:{title:"상태 저장(영속성)",lesson:1,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/상태-저장-영속성"}}},{node:{frontmatter:{title:"질의하기",lesson:3,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/질의하기"}}},{node:{frontmatter:{title:"관리 감독(Supervision)",lesson:5,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/관리-감독-supervision"}}},{node:{frontmatter:{title:"타임아웃",lesson:3,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/타임아웃"}}},{node:{frontmatter:{title:"스냅샷",lesson:2,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/스냅샷"}}},{node:{frontmatter:{title:"상태가 있는 액터",lesson:1,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/상태가-있는-액터"}}},{node:{frontmatter:{title:"Nact 소개",lesson:1,programming_language:"javascript",chapter:1,type:"lesson"},fields:{slug:"/nact-소개"}}},{node:{frontmatter:{title:"인코더/디코더",lesson:2,programming_language:"javascript",chapter:4,type:"lesson"},fields:{slug:"/인코더-디코더"}}},{node:{frontmatter:{title:"퍼시스턴트 쿼리",lesson:4,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/퍼시스턴트-쿼리"}}}]},postBySlug:{html:'<h2 id="스키마-변경"><a href="#%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%B3%80%EA%B2%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>스키마 변경</h2>\n<p>시스템이 유지되는 동안 데이터 스키마는 자연스럽게 변합니다. 요구사항이 변하며 현실적으로 보강되기도 하고, 버그를 없애기 위해 수정되기도 합니다. 운영 중인 시스템에서, 하나의 버전의 데이터를 다른 버전으로 이관하는 것은 정상적인 범위에 들어갑니다.</p>\n<p>스키마 변경 방법의 하나로 배치 작업을 실행하는 방법이 있습니다. 이전 스키마를 새 스키마로 바로 그 자리에서 변경하는 것입니다. 이 방법에는 데이터 손실과 여러가지 불행한 상황이 발생할 위험 소지가 있습니다. 또 데이터 불변의 원칙에도 위배됩니다. 또다른 단점으로는 액터가 상태를 복구하려면 이벤트 저널 데이터에 일관성이 있어야 하므로 어떤 상황에서는 일관성있는 스키마 업데이트를 위해 다운타임이 발생하게 됩니다.</p>\n<p>대안으로는, 이벤트 소싱과 불변 데이터에서 아이디어를 따온 것으로, 스키마 버전 간에 <strong>지연 업그레이드</strong>를 하는 것입니다.</p>\n<p>예를 들어서, 현재 S 스키마의 버전 S<sub>1</sub>, S<sub>2</sub>, S<sub>3</sub>가 있다고 생각해봅시다. 메시지 m<sub>1</sub>, m<sub>2</sub>는 스키마 S<sub>1</sub>로 저장되고, m<sub>3</sub>는 스키마 S<sub>2</sub>로 저장되었습니다. 이제 스키마 S를 모두 S<sub>3</sub>로 업그레이드하려고 합니다. 이제 메시지를 리플레이하기 위해서는 두 변환 함수를 정의해야 합니다. S<sub>1</sub> => S<sub>2</sub>, S<sub>2</sub> => S<sub>3</sub>입니다. 이제 m<sub>3</sub>에 대해서는 S<sub>2</sub> => S<sub>3</sub>를 적용하고, m<sub>1</sub>, m<sub>2</sub>에 대해서는 S<sub>1</sub> => S<sub>2</sub>를 적용한 뒤 S<sub>2</sub> => S<sub>3</sub>를 적용하면 업그레이드가 완료됩니다. 이 방법을 가능하게 하는 것이 <strong>디코더</strong>와 <strong>인코더</strong>를 소개하는 주요 동기입니다.</p>\n<h2 id="퍼시스턴트-액터와-json"><a href="#%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%ED%8A%B8-%EC%95%A1%ED%84%B0%EC%99%80-json" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>퍼시스턴트 액터와 JSON</h2>\n<p>Nact는 저장과 메시지 전달에 JSON을 사용합니다. (JSON을 사용하지 않고) 대충 객체를 직렬화해서 저장한다면, 시스템을 프로토타이핑하는 기간 얼마간은 잘 동작하겠지만, 견고한 상용 제품의 수준으로 설계할 때 데이터 표현 문제가 골칫거리가 될 것입니다.</p>\n<p><code>spawnPersistent</code> 함수에 <code>encoder</code>, <code>snapshotEncoder</code>, <code>decoder</code>, <code>snapshotDecoder</code> 등의 인자를 선택적으로 전달할 수 있습니다. 이들은 각각 JSON을 객체로, 객체를 JSON으로 사상합니다.(직렬화/역직렬화) <strong>인코더</strong>로는 저장되는 데이터에 스키마 버전을 매기고 더 안정된 표현을 사용해서 저장할 수 있습니다. <strong>디코더</strong>는 저장된 버전을 바탕으로 스키마 변경하는 데 유용합니다.</p>\n<h2 id="예제"><a href="#%EC%98%88%EC%A0%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>예제</h2>\n<p>열정적이지만 순진한 어느 개발자가 있었습니다. 그는 <a href="https://en.wikipedia.org/wiki/ROT13">ROT<sub>13</sub></a> 인코딩의 신봉자로서 모든 데이터를 ROT<sub>13</sub>으로 인코딩해서 저장하도록 만들었습니다. (그는 아마 해고 당했을 겁니다.) 이제 이 사태를 어떻게 고쳐보면 될까요?</p>\n<p>아래 예제에서, 스키마 버전0은 ROT<sub>13</sub>으로 저장된 메시지이고(객체로 역직렬화 하기 전에, ROT<sub>13</sub>의 역함수를 적용해서(ROT<sub>13</sub><sup>2</sup> == ROT<sub>13</sub>) 원문으로 되돌려야 합니다.), 버전1에서는 평문(JSON)으로 저장되어 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">/* Rot13 code */</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">\'a\'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">toPositionInAlphabet</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> a\n\n<span class="token keyword">const</span> <span class="token function-variable function">fromPositionInAlphabet</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c <span class="token operator">+</span> a<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">rot13</span> <span class="token operator">=</span> str <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chr <span class="token operator">=></span> <span class="token function">fromPositionInAlphabet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">toPositionInAlphabet</span><span class="token punctuation">(</span>chr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">decoder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>version <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">rot13</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> msg<span class="token punctuation">.</span>text\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">encoder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> system <span class="token operator">=</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token comment">/* 퍼시스턴스 엔진 */</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token function">spawnPersistent</span><span class="token punctuation">(</span>\n  system<span class="token punctuation">,</span>    \n  <span class="token keyword">async</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      \n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>recovering<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>state<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'da-vinci-code\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'da-vinci-code-actor\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    decoder<span class="token punctuation">,</span>\n    encoder<span class="token punctuation">,</span>\n    system\n  <span class="token punctuation">}</span>    \n<span class="token punctuation">)</span>\n</code></pre>\n      </div>',timeToRead:2,excerpt:"…",frontmatter:{title:"인코더/디코더",date:"10/04/2019",programming_language:"javascript",tags:["getting-started","nact","reason","bucklescript"]},fields:{slug:"/인코더-디코더"}}},pathContext:{slug:"/인코더-디코더",programming_language:"javascript",language:"ko_kr"}}}});
//# sourceMappingURL=path---ko-kr-lesson-javascript-인코더-디코더-67a5386a106dea94770e.js.map