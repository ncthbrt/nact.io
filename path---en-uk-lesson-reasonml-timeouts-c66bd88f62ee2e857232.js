webpackJsonp([0xf1033e9dca25],{430:function(s,n){s.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Actor Communication",lesson:2,programming_language:"reasonml",chapter:2,type:"lesson"},fields:{slug:"/actor-communication"}}},{node:{frontmatter:{title:"Adapters",lesson:6,programming_language:"reasonml",chapter:2,type:"lesson"},fields:{slug:"/adapters"}}},{node:{frontmatter:{title:"Decoders and Encoders",lesson:2,programming_language:"reasonml",chapter:4,type:"lesson"},fields:{slug:"/decoders-and-encoders"}}},{node:{frontmatter:{title:"Hierarchy",lesson:4,programming_language:"reasonml",chapter:2,type:"lesson"},fields:{slug:"/hierarchy"}}},{node:{frontmatter:{title:"Persistent Queries",lesson:4,programming_language:"reasonml",chapter:3,type:"lesson"},fields:{slug:"/persistent-queries"}}},{node:{frontmatter:{title:"Querying",lesson:3,programming_language:"reasonml",chapter:2,type:"lesson"},fields:{slug:"/querying"}}},{node:{frontmatter:{title:"Snapshotting",lesson:2,programming_language:"reasonml",chapter:3,type:"lesson"},fields:{slug:"/snapshotting"}}},{node:{frontmatter:{title:"Timeouts",lesson:3,programming_language:"reasonml",chapter:3,type:"lesson"},fields:{slug:"/timeouts"}}},{node:{frontmatter:{title:"Persist",lesson:1,programming_language:"reasonml",chapter:3,type:"lesson"},fields:{slug:"/persist"}}},{node:{frontmatter:{title:"Supervision",lesson:5,programming_language:"reasonml",chapter:2,type:"lesson"},fields:{slug:"/supervision"}}},{node:{frontmatter:{title:"Introduction",lesson:1,programming_language:"reasonml",chapter:1,type:"lesson"},fields:{slug:"/introduction"}}}]},postBySlug:{html:'<p>While not strictly a part of the persistent actor, timeouts are frequently used with snapshotting. Actors take up memory, which is still a limited resource. If an actor has not processed messages in a while, it makes sense to shut it down until it is again needed; this frees up memory. Adding a timeout to the user contacts service is similar to snapshotting:</p>\n<div class="gatsby-highlight">\n      <pre class="language-reason"><code><span class="token keyword">let</span> createContactsService <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">=></span>\n  spawnPersistent<span class="token punctuation">(</span>\n    <span class="token operator">~</span>key<span class="token operator">=</span><span class="token string">"contacts"</span> <span class="token operator">+</span><span class="token operator">+</span> userId<span class="token punctuation">,</span>\n    <span class="token operator">~</span>name<span class="token operator">=</span>userId<span class="token punctuation">,</span>\n    <span class="token operator">~</span>shutdownAfter<span class="token operator">=</span><span class="token number">15</span> <span class="token operator">*</span> minutes<span class="token punctuation">,</span>\n    <span class="token operator">~</span>snapshotEvery<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">*</span> messages<span class="token punctuation">,</span>\n    parent<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>persist<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">/* Same function as before */</span>\n    <span class="token punctuation">}</span>    \n    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>contacts<span class="token punctuation">:</span> <span class="token class-name">ContactIdMap</span><span class="token punctuation">.</span>empty<span class="token punctuation">,</span> seqNumber<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',timeToRead:1,excerpt:"While not strictly a part of the persistent actor, timeouts are frequently used with snapshotting. Actors take up memory, which is still aâ€¦",frontmatter:{title:"Timeouts",date:"11/12/2017",programming_language:"reasonml",tags:["getting-started","nact","reason","bucklescript"]},fields:{slug:"/timeouts"}}},pathContext:{slug:"/timeouts",programming_language:"reasonml",language:"en_uk"}}}});
//# sourceMappingURL=path---en-uk-lesson-reasonml-timeouts-c66bd88f62ee2e857232.js.map