{"version":3,"sources":["webpack:///path---ko-kr-lesson-javascript-상태-저장-영속성-2439186f14a156c88483.js","webpack:///./.cache/json/ko-kr-lesson-javascript-상태-저장-영속성.json"],"names":["webpackJsonp","435","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","programming_language","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","date","tags","pathContext","language"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,OAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA0FC,QAAWC,KAAA,YAAmBR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,aAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAgGC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA8FC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,MAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAyFC,QAAWC,KAAA,WAAkBR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,OAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA0FC,QAAWC,KAAA,YAAmBR,MAAQC,aAAeC,MAAA,OAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA0FC,QAAWC,KAAA,YAAmBR,MAAQC,aAAeC,MAAA,qBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAwGC,QAAWC,KAAA,0BAAgCC,YAAeC,KAAA,w+dAA2peC,WAAA,EAAAC,QAAA,IAAAX,aAA0eC,MAAA,aAAAW,KAAA,aAAAT,qBAAA,aAAAU,MAAA,iDAAqIP,QAAWC,KAAA,gBAAsBO,aAAgBP,KAAA,aAAAJ,qBAAA,aAAAY,SAAA","file":"path---ko-kr-lesson-javascript-상태-저장-영속성-2439186f14a156c88483.js","sourcesContent":["webpackJsonp([136989503986384],{\n\n/***/ 435:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"인코더/디코더\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/인코더-디코더\"}}},{\"node\":{\"frontmatter\":{\"title\":\"시작하기\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/시작하기\"}}},{\"node\":{\"frontmatter\":{\"title\":\"액터 간 통신\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/액터-간-통신\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Nact 소개\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/nact-소개\"}}},{\"node\":{\"frontmatter\":{\"title\":\"액터의 계층 구조\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/액터의-계층-구조\"}}},{\"node\":{\"frontmatter\":{\"title\":\"상태 저장(영속성)\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/상태-저장-영속성\"}}},{\"node\":{\"frontmatter\":{\"title\":\"퍼시스턴트 쿼리\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/퍼시스턴트-쿼리\"}}},{\"node\":{\"frontmatter\":{\"title\":\"스냅샷\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/스냅샷\"}}},{\"node\":{\"frontmatter\":{\"title\":\"상태가 있는 액터\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/상태가-있는-액터\"}}},{\"node\":{\"frontmatter\":{\"title\":\"타임아웃\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/타임아웃\"}}},{\"node\":{\"frontmatter\":{\"title\":\"질의하기\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/질의하기\"}}},{\"node\":{\"frontmatter\":{\"title\":\"관리 감독(Supervision)\",\"lesson\":5,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/관리-감독-supervision\"}}}]},\"postBySlug\":{\"html\":\"<p>지금까지 만든 주소록 서비스 예제는 여전히 그다지 유용하지 않습니다. 비록 여러 사용자가 사용할 수 있는 버전으로 확장하긴 했지만, 아직도 부족한 점이 있습니다. 바로 시스템을 재시작하면 연락처 데이터를 다 잃어버리게 된다는 것입니다. 이를 극복하기 위해 <strong>nact</strong>에서는, 상태 있는 액터에 <code>persist</code> 메서드를 추가해서 보강합니다.</p>\\n<p><code>persist</code> 메서드를 사용하기 위해서는 먼저 저장(영속성) 엔진을 설정해야 합니다. 현재는 <strong>PostgreSQL</strong>\\b 엔진 구현만 제공하고 있습니다. (다만 여러분이 각자 필요한 엔진을 쉽게 작성할 수 있습니다.) PostgreSQL 엔진을 사용하려면 아래와 같이 하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save nact-persistence-postgres\\n$ yarn add nact-persistence-postgres\\n</code></pre>\\n      </div>\\n<p>여러분이 데이터베이스 연결 URL을 환경변수 <code>DATABASE_URL</code>에 설정했다고 가정하고, 기존 코드에서 액터 시스템을 생성하는 부분을 아래와 같이 수정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> start<span class=\\\"token punctuation\\\">,</span> configurePersistence<span class=\\\"token punctuation\\\">,</span> spawnPersistent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'nact'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> PostgresPersistenceEngine <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'nact-persistence-postgres'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> connectionString <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>DATABASE_URL\\n<span class=\\\"token keyword\\\">const</span> system <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">configurePersistence</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PostgresPersistenceEngine</span><span class=\\\"token punctuation\\\">(</span>connectionString<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><code>configurePersistence</code> 함수는 액터 시스템에 지정한 저장 엔진을 플러그인으로 추가합니다.</p>\\n<p>이제 남은 일은 연락처 서비스가 상태를 저장하도록 만드는 것입니다. 상태를 변경하는 메시지를 저장하고, 액터가 재시작할 때 메시지를 재생하여 상태를 복구합니다.<sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup> 액터가 재시작할 때는 먼저 저장된 메시지를 재생하여 상태를 복구한 다음에 새로 도착한 메시지를 처리합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">spawnUserContactService</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">spawnPersistent</span><span class=\\\"token punctuation\\\">(</span>\\n  parent<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> contacts<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>    \\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> GET_CONTACTS<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>        \\n      <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> CREATE_CONTACT<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> newContact <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">uuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>msg<span class=\\\"token punctuation\\\">.</span>payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> contacts<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>newContact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> newContact <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// 이전에 저장되지 않은 메시지만 저장한다.</span>\\n      <span class=\\\"token comment\\\">// `persist` 메서드는 반드시 `await`로 해결하고 지나가야 한다.</span>\\n      <span class=\\\"token comment\\\">// 그렇지 않으면 액터가 이 메시지를 저장하기도 전에 새로운 메시지를 받아서 처리하게 될 수도 있다.</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// 복구중에는 `dispatch`를 해도 안전하다. (아무 액터에게도 보내지 않으며, 무시된다.)</span>\\n      <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> newContact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> nextState\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> contact <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>contactId<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">case</span> GET_CONTACT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload<span class=\\\"token punctuation\\\">:</span> contact<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">break</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">case</span> REMOVE_CONTACT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>contact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> contact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> nextState\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">case</span> UPDATE_CONTACT<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> updatedContact <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>contact<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>msg<span class=\\\"token punctuation\\\">.</span>payload <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>contact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> updatedContact <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>                \\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> updatedContact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> nextState\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>          \\n        <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> NOT_FOUND<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">:</span> msg<span class=\\\"token punctuation\\\">.</span>contactId <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> state\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 저장 키</span>\\n  <span class=\\\"token comment\\\">// 액터의 상태를 복구하기 위해서는 저장 키가 같아야 한다.</span>\\n  <span class=\\\"token comment\\\">// 네임스페이스 등으로 잘 구분해서, 실수로 키가 섞이지 않도록 해야 한다.</span>\\n  <span class=\\\"token comment\\\">// 그렇지 않으면 디버깅하기 매우 어렵다.</span>\\n  <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`contacts:</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userId<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  userId\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>정석대로 하면, 메시지 자체를 저장하는 것이 아니라 메시지로 말미암은 변화를 이벤트로 치환하고, 그 이벤트를 저장한다. 복구할 때는 저장된 이벤트를 재생한다. 그래서 Event-Sourcing이라고 하는 것이다.</p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"timeToRead\":2,\"excerpt\":\"…\",\"frontmatter\":{\"title\":\"상태 저장(영속성)\",\"date\":\"22/03/2019\",\"programming_language\":\"javascript\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/상태-저장-영속성\"}}},\"pathContext\":{\"slug\":\"/상태-저장-영속성\",\"programming_language\":\"javascript\",\"language\":\"ko_kr\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ko-kr-lesson-javascript-상태-저장-영속성-2439186f14a156c88483.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"인코더/디코더\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/인코더-디코더\"}}},{\"node\":{\"frontmatter\":{\"title\":\"시작하기\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/시작하기\"}}},{\"node\":{\"frontmatter\":{\"title\":\"액터 간 통신\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/액터-간-통신\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Nact 소개\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/nact-소개\"}}},{\"node\":{\"frontmatter\":{\"title\":\"액터의 계층 구조\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/액터의-계층-구조\"}}},{\"node\":{\"frontmatter\":{\"title\":\"상태 저장(영속성)\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/상태-저장-영속성\"}}},{\"node\":{\"frontmatter\":{\"title\":\"퍼시스턴트 쿼리\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/퍼시스턴트-쿼리\"}}},{\"node\":{\"frontmatter\":{\"title\":\"스냅샷\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/스냅샷\"}}},{\"node\":{\"frontmatter\":{\"title\":\"상태가 있는 액터\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/상태가-있는-액터\"}}},{\"node\":{\"frontmatter\":{\"title\":\"타임아웃\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/타임아웃\"}}},{\"node\":{\"frontmatter\":{\"title\":\"질의하기\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/질의하기\"}}},{\"node\":{\"frontmatter\":{\"title\":\"관리 감독(Supervision)\",\"lesson\":5,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/관리-감독-supervision\"}}}]},\"postBySlug\":{\"html\":\"<p>지금까지 만든 주소록 서비스 예제는 여전히 그다지 유용하지 않습니다. 비록 여러 사용자가 사용할 수 있는 버전으로 확장하긴 했지만, 아직도 부족한 점이 있습니다. 바로 시스템을 재시작하면 연락처 데이터를 다 잃어버리게 된다는 것입니다. 이를 극복하기 위해 <strong>nact</strong>에서는, 상태 있는 액터에 <code>persist</code> 메서드를 추가해서 보강합니다.</p>\\n<p><code>persist</code> 메서드를 사용하기 위해서는 먼저 저장(영속성) 엔진을 설정해야 합니다. 현재는 <strong>PostgreSQL</strong>\\b 엔진 구현만 제공하고 있습니다. (다만 여러분이 각자 필요한 엔진을 쉽게 작성할 수 있습니다.) PostgreSQL 엔진을 사용하려면 아래와 같이 하면 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save nact-persistence-postgres\\n$ yarn add nact-persistence-postgres\\n</code></pre>\\n      </div>\\n<p>여러분이 데이터베이스 연결 URL을 환경변수 <code>DATABASE_URL</code>에 설정했다고 가정하고, 기존 코드에서 액터 시스템을 생성하는 부분을 아래와 같이 수정합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> start<span class=\\\"token punctuation\\\">,</span> configurePersistence<span class=\\\"token punctuation\\\">,</span> spawnPersistent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'nact'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> PostgresPersistenceEngine <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'nact-persistence-postgres'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> connectionString <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>DATABASE_URL\\n<span class=\\\"token keyword\\\">const</span> system <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">configurePersistence</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PostgresPersistenceEngine</span><span class=\\\"token punctuation\\\">(</span>connectionString<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><code>configurePersistence</code> 함수는 액터 시스템에 지정한 저장 엔진을 플러그인으로 추가합니다.</p>\\n<p>이제 남은 일은 연락처 서비스가 상태를 저장하도록 만드는 것입니다. 상태를 변경하는 메시지를 저장하고, 액터가 재시작할 때 메시지를 재생하여 상태를 복구합니다.<sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup> 액터가 재시작할 때는 먼저 저장된 메시지를 재생하여 상태를 복구한 다음에 새로 도착한 메시지를 처리합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">spawnUserContactService</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">spawnPersistent</span><span class=\\\"token punctuation\\\">(</span>\\n  parent<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> contacts<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>    \\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> GET_CONTACTS<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>        \\n      <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> CREATE_CONTACT<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> newContact <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">uuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>msg<span class=\\\"token punctuation\\\">.</span>payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> contacts<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>newContact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> newContact <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// 이전에 저장되지 않은 메시지만 저장한다.</span>\\n      <span class=\\\"token comment\\\">// `persist` 메서드는 반드시 `await`로 해결하고 지나가야 한다.</span>\\n      <span class=\\\"token comment\\\">// 그렇지 않으면 액터가 이 메시지를 저장하기도 전에 새로운 메시지를 받아서 처리하게 될 수도 있다.</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// 복구중에는 `dispatch`를 해도 안전하다. (아무 액터에게도 보내지 않으며, 무시된다.)</span>\\n      <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> newContact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> nextState\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> contact <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>contactId<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">case</span> GET_CONTACT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload<span class=\\\"token punctuation\\\">:</span> contact<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">break</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">case</span> REMOVE_CONTACT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>contact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> contact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> nextState\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">case</span> UPDATE_CONTACT<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> updatedContact <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>contact<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>msg<span class=\\\"token punctuation\\\">.</span>payload <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">.</span>contacts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>contact<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> updatedContact <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ctx<span class=\\\"token punctuation\\\">.</span>recovering<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">await</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">persist</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>                \\n            <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> SUCCESS<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">:</span> updatedContact <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> nextState\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>          \\n        <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> NOT_FOUND<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">:</span> msg<span class=\\\"token punctuation\\\">.</span>contactId <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> state\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 저장 키</span>\\n  <span class=\\\"token comment\\\">// 액터의 상태를 복구하기 위해서는 저장 키가 같아야 한다.</span>\\n  <span class=\\\"token comment\\\">// 네임스페이스 등으로 잘 구분해서, 실수로 키가 섞이지 않도록 해야 한다.</span>\\n  <span class=\\\"token comment\\\">// 그렇지 않으면 디버깅하기 매우 어렵다.</span>\\n  <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`contacts:</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userId<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  userId\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>정석대로 하면, 메시지 자체를 저장하는 것이 아니라 메시지로 말미암은 변화를 이벤트로 치환하고, 그 이벤트를 저장한다. 복구할 때는 저장된 이벤트를 재생한다. 그래서 Event-Sourcing이라고 하는 것이다.</p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"timeToRead\":2,\"excerpt\":\"…\",\"frontmatter\":{\"title\":\"상태 저장(영속성)\",\"date\":\"22/03/2019\",\"programming_language\":\"javascript\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/상태-저장-영속성\"}}},\"pathContext\":{\"slug\":\"/상태-저장-영속성\",\"programming_language\":\"javascript\",\"language\":\"ko_kr\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ko-kr-lesson-javascript-상태-저장-영속성.json\n// module id = 435\n// module chunks = 136989503986384"],"sourceRoot":""}