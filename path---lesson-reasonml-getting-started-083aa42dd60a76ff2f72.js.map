{"version":3,"sources":["webpack:///path---lesson-reasonml-getting-started-083aa42dd60a76ff2f72.js","webpack:///./.cache/json/lesson-reasonml-getting-started.json"],"names":["webpackJsonp","420","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","category","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","cover","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,sBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA2FC,QAAWC,KAAA,2BAAkCR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAiFC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,qBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA0FC,QAAWC,KAAA,0BAAiCR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA+EC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,mBAA0BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,iBAAuBC,YAAeC,KAAA,kwLAAyuLC,WAAA,EAAAC,QAAA,6IAAAX,aAAuZC,MAAA,kBAAAW,MAAA,+CAAAC,KAAA,aAAAV,SAAA,WAAAW,MAAA,mDAAqLR,QAAWC,KAAA,sBAA4BQ,aAAgBR,KAAA,mBAAAJ,SAAA","file":"path---lesson-reasonml-getting-started-083aa42dd60a76ff2f72.js","sourcesContent":["webpackJsonp([130927024274822],{\n\n/***/ 420:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>Reason Nact has only been tested to work on Node 8 and above. You can install Nact in your project by invoking the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save reason-nact\\n</code></pre>\\n      </div>\\n<p>You'll also need to add <code>reason-nact</code> to your dependencies in the <code>bsconfig.json</code> file.</p>\\n<p>Once installed, you need to import the start function, which starts and then returns the actor system.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Once you have a reference to the system, it is now possible to create our first actor. To create an actor you have to <code>spawn</code> it.  As is traditional, let us create an actor which says hello when a message is sent to it. Since this actor doesn't require any state, we can use the simpler <code>spawnStateless</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">type</span> greetingMsg <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> greeter <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"greeter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> print_endline<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello \\\"</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">+</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndispatch<span class=\\\"token punctuation\\\">(</span>greeter<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The first unnamed argument to <code>spawnStateless</code> is the parent, which is in this case the actor system. The <a href=\\\"#hierarchy\\\">hierarchy</a> section will go into more detail about this.</p>\\n<p>The second unnamed argument to <code>spawnStateless</code> is a function which is invoked when a message is received.</p>\\n<p>The name argument to <code>spawnStateless</code> is optional, and if omitted, the actor is automatically assigned a name by the system.</p>\\n<p>To communicate with the greeter, we need to <code>dispatch</code> a message to it informing it who we are:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code>dispatch<span class=\\\"token punctuation\\\">(</span>greeter<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This should print <code>\\\"Hello Erlich Bachman\\\"</code> to the console. </p>\\n<blockquote>\\n<p>Note: Stateless actors can service multiple requests at the same time. Statelessness means that such actors do not have to cater for concurrency issues.</p>\\n</blockquote>\\n<p>An alternative to calling dispatch is opening <code>Nact.Operators</code> and using the  <code>&#x3C;-&#x3C;</code> operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\ngreeter <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> greeter<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>To complete this example, we need to shutdown our system. We can do this by calling <code>stop(system)</code>\\nThe <code>stop</code> function also can be used to terminate actors.</p>\",\"timeToRead\":2,\"excerpt\":\"Reason Nact has only been tested to work on Node 8 and above. You can install Nact in your project by invoking the following: You'll also…\",\"frontmatter\":{\"title\":\"Getting Started\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/getting-started\"}}},\"pathContext\":{\"slug\":\"/getting-started\",\"category\":\"reasonml\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lesson-reasonml-getting-started-083aa42dd60a76ff2f72.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>Reason Nact has only been tested to work on Node 8 and above. You can install Nact in your project by invoking the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save reason-nact\\n</code></pre>\\n      </div>\\n<p>You'll also need to add <code>reason-nact</code> to your dependencies in the <code>bsconfig.json</code> file.</p>\\n<p>Once installed, you need to import the start function, which starts and then returns the actor system.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Once you have a reference to the system, it is now possible to create our first actor. To create an actor you have to <code>spawn</code> it.  As is traditional, let us create an actor which says hello when a message is sent to it. Since this actor doesn't require any state, we can use the simpler <code>spawnStateless</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">type</span> greetingMsg <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> greeter <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"greeter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> print_endline<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello \\\"</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">+</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndispatch<span class=\\\"token punctuation\\\">(</span>greeter<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The first unnamed argument to <code>spawnStateless</code> is the parent, which is in this case the actor system. The <a href=\\\"#hierarchy\\\">hierarchy</a> section will go into more detail about this.</p>\\n<p>The second unnamed argument to <code>spawnStateless</code> is a function which is invoked when a message is received.</p>\\n<p>The name argument to <code>spawnStateless</code> is optional, and if omitted, the actor is automatically assigned a name by the system.</p>\\n<p>To communicate with the greeter, we need to <code>dispatch</code> a message to it informing it who we are:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code>dispatch<span class=\\\"token punctuation\\\">(</span>greeter<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This should print <code>\\\"Hello Erlich Bachman\\\"</code> to the console. </p>\\n<blockquote>\\n<p>Note: Stateless actors can service multiple requests at the same time. Statelessness means that such actors do not have to cater for concurrency issues.</p>\\n</blockquote>\\n<p>An alternative to calling dispatch is opening <code>Nact.Operators</code> and using the  <code>&#x3C;-&#x3C;</code> operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\ngreeter <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Erlich Bachman\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> greeter<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>To complete this example, we need to shutdown our system. We can do this by calling <code>stop(system)</code>\\nThe <code>stop</code> function also can be used to terminate actors.</p>\",\"timeToRead\":2,\"excerpt\":\"Reason Nact has only been tested to work on Node 8 and above. You can install Nact in your project by invoking the following: You'll also…\",\"frontmatter\":{\"title\":\"Getting Started\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/getting-started\"}}},\"pathContext\":{\"slug\":\"/getting-started\",\"category\":\"reasonml\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lesson-reasonml-getting-started.json\n// module id = 420\n// module chunks = 130927024274822"],"sourceRoot":""}