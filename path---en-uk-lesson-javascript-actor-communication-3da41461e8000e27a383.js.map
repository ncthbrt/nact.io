{"version":3,"sources":["webpack:///path---en-uk-lesson-javascript-actor-communication-3da41461e8000e27a383.js","webpack:///./.cache/json/en-uk-lesson-javascript-actor-communication.json"],"names":["webpackJsonp","408","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","programming_language","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","date","tags","pathContext","language"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,sBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAyGC,QAAWC,KAAA,2BAAkCR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA2GC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAqGC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAkGC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,qBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAwGC,QAAWC,KAAA,0BAAiCR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAkGC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAqGC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA8FC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAA8FC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,qBAAA,aAAAC,QAAA,EAAAC,KAAA,UAAiGC,QAAWC,KAAA,oBAA0BC,YAAeC,KAAA,o2JAA6zJC,WAAA,EAAAC,QAAA,gJAAsTX,aAA+GC,MAAA,sBAAAW,KAAA,aAAAT,qBAAA,aAAAU,MAAA,iDAA8IP,QAAWC,KAAA,0BAAgCO,aAAgBP,KAAA,uBAAAJ,qBAAA,aAAAY,SAAA","file":"path---en-uk-lesson-javascript-actor-communication-3da41461e8000e27a383.js","sourcesContent":["webpackJsonp([64391299922804],{\n\n/***/ 408:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}}]},\"postBySlug\":{\"html\":\"<!-- <a class=\\\"remix-button\\\" href=\\\"https://glitch.com/edit/#!/remix/nact-ping-pong\\\" target=\\\"_blank\\\">\\n  <button>\\n    <img src=\\\"/img/code-fork-symbol.svg\\\"/> REMIX\\n  </button>\\n</a> -->\\n<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code>dispatch</code> method. </p>\\n<p>The third parameter of <code>dispatch</code> is the sender. This parameter is very useful in allowing an actor to service requests without knowing explicitly who the sender is.</p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to Ping as Pong use this third parameter. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">delay</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> ping <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawnStateless</span><span class=\\\"token punctuation\\\">(</span>system<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>  <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ping: Pong is a little slow. So I'm giving myself a little handicap :P</span>\\n  <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">delay</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ping'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> pong <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawnStateless</span><span class=\\\"token punctuation\\\">(</span>system<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>  <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'pong'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ping<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'begin'</span><span class=\\\"token punctuation\\\">,</span> pong<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>begin\\nping\\npong\\nping\\npong\\nping\\netc...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the  dispatch…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"date\":\"11/12/2017\",\"programming_language\":\"javascript\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"programming_language\":\"javascript\",\"language\":\"en_uk\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-uk-lesson-javascript-actor-communication-3da41461e8000e27a383.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"programming_language\":\"javascript\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}}]},\"postBySlug\":{\"html\":\"<!-- <a class=\\\"remix-button\\\" href=\\\"https://glitch.com/edit/#!/remix/nact-ping-pong\\\" target=\\\"_blank\\\">\\n  <button>\\n    <img src=\\\"/img/code-fork-symbol.svg\\\"/> REMIX\\n  </button>\\n</a> -->\\n<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code>dispatch</code> method. </p>\\n<p>The third parameter of <code>dispatch</code> is the sender. This parameter is very useful in allowing an actor to service requests without knowing explicitly who the sender is.</p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to Ping as Pong use this third parameter. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">delay</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> ping <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawnStateless</span><span class=\\\"token punctuation\\\">(</span>system<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>  <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ping: Pong is a little slow. So I'm giving myself a little handicap :P</span>\\n  <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">delay</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ping'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> pong <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawnStateless</span><span class=\\\"token punctuation\\\">(</span>system<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>  <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'pong'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span>ping<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'begin'</span><span class=\\\"token punctuation\\\">,</span> pong<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>begin\\nping\\npong\\nping\\npong\\nping\\netc...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the  dispatch…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"date\":\"11/12/2017\",\"programming_language\":\"javascript\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"programming_language\":\"javascript\",\"language\":\"en_uk\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-uk-lesson-javascript-actor-communication.json\n// module id = 408\n// module chunks = 64391299922804"],"sourceRoot":""}