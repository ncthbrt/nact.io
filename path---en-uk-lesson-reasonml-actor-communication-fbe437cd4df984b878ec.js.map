{"version":3,"sources":["webpack:///path---en-uk-lesson-reasonml-actor-communication-fbe437cd4df984b878ec.js","webpack:///./.cache/json/en-uk-lesson-reasonml-actor-communication.json"],"names":["webpackJsonp","420","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","programming_language","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","date","tags","pathContext","language"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,sBAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuGC,QAAWC,KAAA,2BAAkCR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA4FC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAAyGC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgGC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA2FC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,qBAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAAsGC,QAAWC,KAAA,0BAAiCR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA4FC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgGC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,mBAA0BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,qBAAA,WAAAC,QAAA,EAAAC,KAAA,UAA4FC,QAAWC,KAAA,iBAAuBC,YAAeC,KAAA,2qLAA2rLC,WAAA,EAAAC,QAAA,gJAAmTX,aAA+GC,MAAA,sBAAAW,KAAA,aAAAT,qBAAA,WAAAU,MAAA,mDAA8IP,QAAWC,KAAA,0BAAgCO,aAAgBP,KAAA,uBAAAJ,qBAAA,WAAAY,SAAA","file":"path---en-uk-lesson-reasonml-actor-communication-fbe437cd4df984b878ec.js","sourcesContent":["webpackJsonp([108595273983609],{\n\n/***/ 420:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"programming_language\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code>dispatch</code> method. </p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to ping and\\nspecify that the sender in msgType is pong.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> msgType <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> ping<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"ping\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      dispatch<span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> pong<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"pong\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">/* Here we're using the &lt;-&lt; operator as a shorthand for the dispatch method */</span>\\n      sender <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nping <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>pong<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>begin\\nping\\npong\\nping\\npong\\nping\\n...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the  dispatch…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"date\":\"11/12/2017\",\"programming_language\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"programming_language\":\"reasonml\",\"language\":\"en_UK\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-uk-lesson-reasonml-actor-communication-fbe437cd4df984b878ec.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"programming_language\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persistent Queries\",\"lesson\":4,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persistent-queries\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"programming_language\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"programming_language\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code>dispatch</code> method. </p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to ping and\\nspecify that the sender in msgType is pong.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> msgType <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> ping<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"ping\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      dispatch<span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> pong<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"pong\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">/* Here we're using the &lt;-&lt; operator as a shorthand for the dispatch method */</span>\\n      sender <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nping <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>pong<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>begin\\nping\\npong\\nping\\npong\\nping\\n...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the  dispatch…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"date\":\"11/12/2017\",\"programming_language\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"programming_language\":\"reasonml\",\"language\":\"en_UK\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-uk-lesson-reasonml-actor-communication.json\n// module id = 420\n// module chunks = 108595273983609"],"sourceRoot":""}