webpackJsonp([72210061940689],{440:function(n,s){n.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"액터 간 통신",lesson:2,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/액터-간-통신"}}},{node:{frontmatter:{title:"시작하기",lesson:2,programming_language:"javascript",chapter:1,type:"lesson"},fields:{slug:"/시작하기"}}},{node:{frontmatter:{title:"액터의 계층 구조",lesson:4,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/액터의-계층-구조"}}},{node:{frontmatter:{title:"Nact 소개",lesson:1,programming_language:"javascript",chapter:1,type:"lesson"},fields:{slug:"/nact-소개"}}},{node:{frontmatter:{title:"상태 저장(영속성)",lesson:1,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/상태-저장-영속성"}}},{node:{frontmatter:{title:"퍼시스턴트 쿼리",lesson:4,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/퍼시스턴트-쿼리"}}},{node:{frontmatter:{title:"스냅샷",lesson:2,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/스냅샷"}}},{node:{frontmatter:{title:"상태가 있는 액터",lesson:1,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/상태가-있는-액터"}}},{node:{frontmatter:{title:"관리 감독(Supervision)",lesson:5,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/관리-감독-supervision"}}},{node:{frontmatter:{title:"타임아웃",lesson:3,programming_language:"javascript",chapter:3,type:"lesson"},fields:{slug:"/타임아웃"}}},{node:{frontmatter:{title:"질의하기",lesson:3,programming_language:"javascript",chapter:2,type:"lesson"},fields:{slug:"/질의하기"}}},{node:{frontmatter:{title:"인코더/디코더",lesson:2,programming_language:"javascript",chapter:4,type:"lesson"},fields:{slug:"/인코더-디코더"}}}]},postBySlug:{html:'<p>이전 <strong>질의 하기</strong> 장에서 만든 예제 애플리케이션은 그다지 쓸모있지 않습니다. 그 이유는 첫째로 단일 유저를 위한 주소록만 제공한다는 점이며, 두번째는 시스템이 재시작하면 모든 연락처가 소실된다는 점입니다. 이번 장에서는 액터 시스템의 중요한 기능인 계층 구조를 사용해서 다중 사용자를 지원하도록 해보겠습니다.</p>\n<p>액터는 <strong>계층적</strong>으로 배치됩니다. <strong>액터는 자녀 액터를 만들 수 있습니다.</strong> 따라서 <strong>모든 액터에는 그 부모 액터가 존재</strong>합니다. 액터의 생명주기는 부모\b 액터에 달려있습니다. <strong>어떤 액터가 중지하면, 그 액터의 모든 자녀 액터는 중지</strong>합니다.</p>\n<p>지금까지는 액터 시스템(액터 시스템 역시 일종의 액터입니다.)의 자녀 액터를 만들었습니다. 그러나 실제 운영 시스템에서, 액터 시스템의 자녀 액터만 만들어서 사용하는 것은 안티패턴입니다. 프로그램의 모든 코드를 단 하나의 파일로 구성하는 것이 안티패턴인 것과 같은 맥락입니다. 액터의 계층 구조를 이용함으로써 <strong>관심사의 분리(separation of concerns)</strong>와 시스템 기능의 <strong>캡슐화</strong>를 달성하고, 동시에 <strong>시스템 장애와 액터의 종료 처리</strong>와 같은 부분에 대해 일관적인 추론을 할 수 있습니다.</p>\n<p>다시 주소록 애플리케이션으로 돌아가서, 단일 사용자 주소록 서비스가 이번에는 더 큰 규모의 시스템의 일부분이라고 생각해봅시다. 예를 들면 이메일 캠페인 관리자 API 서비스 같은 것입니다. 아마도 전체 시스템의 그림은 아래와 같이 나타낼 수 있겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>└── 캠페인 관리자 서비스\n          │\n          ├── 주소록 서비스\n          │       │\n          │       ├── 사용자 A의 주소록\n          │       ├── 사용자 B의 주소록\n          │       └── ...\n          │\n          └── 이메일 서비스\n                  │\n                  ├── 이메일 템플릿 서비스\n                  ├── 이메일 전송 서비스\n                  └── ...</code></pre>\n      </div>\n<p>그림에서 이메일 서비스는 템플릿을 관리하고 메일을 전송하는 일을 담당합니다. 그리고 주소록 서비스는 각 사용자의 주소록 정보를 액터로 모델링합니다. (<strong>일정 기간 활동이 없는 액터는 종료할 수 있습니다.</strong> 그래서 이렇게 여러 자녀 액터로 분리하는 것은, 특히 프로덕션 환경에서 매우 적절한 방법입니다.)</p>\n<p>주소록 서비스에 집중해서, 어떻게 하면 계층 구조를 잘 활용할 수 있을지 알아봅시다. 다중 사용자를 지원하기 위해서는 다음과 같은 작업들이 추가로 필요합니다.</p>\n<ul>\n<li>기존의 주소록 서비스를 수정해서, 액터를 생성할 때 부모 액터와 액터 이름을 인자로 받도록 합니다.</li>\n<li>주소록 액터의 부모 액터를 만들어서, 이 부모 액터가 적절한 자녀 액터로 요청을 라우팅하도록 합니다.</li>\n<li>주소록 API 엔드포인트의 URL 경로에 <code>user_id</code>를 추가합니다. 메시지에도 <code>userId</code>를 추가합니다.</li>\n</ul>\n<p>기존의 주소록 서비스는 이렇게 바뀝니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">spawnUserContactService</span> <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">spawn</span><span class="token punctuation">(</span>\n  parent<span class="token punctuation">,</span>\n  handler<span class="token punctuation">,</span> <span class="token comment">// 기존과 같음</span>\n  userId\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>연락처 액터의 부모 액터도 만듭니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">spawnContactsService</span> <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">spawnStateless</span><span class="token punctuation">(</span>\n  parent<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> userId <span class="token operator">=</span> msg<span class="token punctuation">.</span>userId\n    <span class="token keyword">let</span> childActor\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      childActor <span class="token operator">=</span> ctx<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      childActor <span class="token operator">=</span> <span class="token function">spawnUserContactService</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>self<span class="token punctuation">,</span> userId<span class="token punctuation">)</span>            \n    <span class="token punctuation">}</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span>childActor<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>sender<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'contacts\'</span>\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>새로 만든 부분들이 액터의 계층 구조의 힘을 보여줍니다. 이제 주소록 서비스(부모 액터)는 <strong>자녀 액터의 세세한 구현에 신경쓰지 않아도 됩니다.</strong> (심지어 자녀 액터들이 어떤 메시지를 처리하는지도 알 필요가 없습니다.) 자녀 액터도 다중 사용자 환경에 대해서 고민할 필요가 없이, <strong>자기 역할에만 충실하게</strong> 됩니다.</p>\n<p>예제를 완성하기 위해 API 엔드포인트도 수정하겠습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/api/:user_id/contacts\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">performQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> GET_CONTACTS<span class="token punctuation">,</span> userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user_id <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/api/:user_id/contacts/:contact_id\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> \n  <span class="token function">performQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> GET_CONTACT<span class="token punctuation">,</span>\n    userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>\n    contactId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>contact_id\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'/api/:user_id/contacts\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">performQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> CREATE_CONTACT<span class="token punctuation">,</span> payload<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">\'/api/:user_id/contacts/:contact_id\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> \n  <span class="token function">performQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> UPDATE_CONTACT<span class="token punctuation">,</span>\n    userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>\n    contactId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>contact_id<span class="token punctuation">,</span>\n    payload<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">\'/api/:user_id/contacts/:contact_id\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> \n  <span class="token function">performQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> REMOVE_CONTACT<span class="token punctuation">,</span>\n    userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>\n    contactId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>contact_id\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>이제 <strong>최소 기능 제품</strong>(Minimum Viable Product, MVP)을 만들기 위해 남은 과제는, <strong>시스템을 재시작해도 데이터가 사라지지 않도록 상태를 저장하는 방법</strong>을 강구하는 것입니다.</p>',timeToRead:3,excerpt:"…",frontmatter:{title:"액터의 계층 구조",date:"22/03/2019",programming_language:"javascript",tags:["getting-started","nact","javascript","nodejs"]},fields:{slug:"/액터의-계층-구조"}}},pathContext:{slug:"/액터의-계층-구조",programming_language:"javascript",language:"ko_KR"}}}});
//# sourceMappingURL=path---ko-kr-lesson-javascript-액터의-계층-구조-181190aea85fcaffaf92.js.map